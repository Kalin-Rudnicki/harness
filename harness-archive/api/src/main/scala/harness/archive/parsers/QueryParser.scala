// !!! DO NOT MODIFY !!!
// File was automatically generated by slyce

package harness.archive.parsers

// format: off

object QueryParser extends _root_.slyce.parse.Parser {
  
  override type NTRoot = _root_.harness.archive.parsers.QueryParser.NonTerminal.Query
  
  // =====| Terminals |=====
  
  sealed abstract class Terminal(final val tokName: _root_.scala.Predef.String) extends _root_.slyce.core.Token
  object Terminal {
    final case class chars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal("chars")
                                                                                                     with _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem.Lift
    final case class escChar(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal("escChar")
                                                                                                       with _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem.Lift
    
    final case class `!=`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""!="""")
                                                                  with _root_.slyce.core.Token.Const
                                                                  with _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift
    final case class `\"`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""\""""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `&`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""&"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operator
    final case class `(`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""("""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `)`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal("""")"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `,`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal("""","""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `<`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""<"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift
    final case class `<=`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""<="""")
                                                                  with _root_.slyce.core.Token.Const
                                                                  with _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift
    final case class `=`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""="""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift
    final case class `>`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal("""">"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift
    final case class `>=`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal("""">="""")
                                                                  with _root_.slyce.core.Token.Const
                                                                  with _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift
    final case class `\\?`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""?"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `[`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""["""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `]`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""]"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `|`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""|"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operator
    final case class `~=`(span: _root_.slyce.core.Span.Highlight) extends _root_.harness.archive.parsers.QueryParser.Terminal(""""~="""")
                                                                  with _root_.slyce.core.Token.Const
                                                                  with _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift
    
    val __findRawTerminal: _root_.slyce.core.Span.Highlight => PartialFunction[_root_.scala.Predef.String, _root_.harness.archive.parsers.QueryParser.Terminal] =
      span => {
        case "!=" => Terminal.`!=`(span)
        case "\"" => Terminal.`\"`(span)
        case "&" => Terminal.`&`(span)
        case "(" => Terminal.`(`(span)
        case ")" => Terminal.`)`(span)
        case "," => Terminal.`,`(span)
        case "<" => Terminal.`<`(span)
        case "<=" => Terminal.`<=`(span)
        case "=" => Terminal.`=`(span)
        case ">" => Terminal.`>`(span)
        case ">=" => Terminal.`>=`(span)
        case "?" => Terminal.`\\?`(span)
        case "[" => Terminal.`[`(span)
        case "]" => Terminal.`]`(span)
        case "|" => Terminal.`|`(span)
        case "~=" => Terminal.`~=`(span)
      }
  }
  
  // =====| Non-Terminals |=====
  
  sealed abstract class NonTerminal(final val ntName: _root_.scala.Predef.String) extends _root_.slyce.core.NonTerminal
  object NonTerminal {
    
    sealed abstract class AnonList0 extends _root_.harness.archive.parsers.QueryParser.NonTerminal("AnonList0") {
      
      final def toList: _root_.scala.List[_root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0, stack: _root_.scala.List[_root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0.Lift]): _root_.scala.List[_root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0.Lift] =
          queue match {
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._1(lift, next) => loop(next, lift :: stack)
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList0 {
      
      type Lift = _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem,
        _2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0
      
      case object _2 extends _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0
      
    }
    
    final case class AnonList1Head(
      _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text,
      _2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail,
    ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal("AnonList1Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail, stack: _root_.scala.List[_root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head.Lift]): _root_.scala.List[_root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head.Lift] =
          queue match {
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList1Head {
      
      type Lift = _root_.harness.archive.parsers.QueryParser.NonTerminal.Text
      
    }
    
    sealed abstract class AnonList1Tail extends _root_.harness.archive.parsers.QueryParser.NonTerminal("AnonList1Tail")
    object AnonList1Tail {
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`,`,
        _2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text,
        _3: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail
      
      case object _2 extends _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail
      
    }
    
    sealed abstract class CompOp extends _root_.harness.archive.parsers.QueryParser.NonTerminal("CompOp") {
      
      final def lift: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp.Lift =
        this match {
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._1(lift) => lift
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._2(lift) => lift
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._3(lift) => lift
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._4(lift) => lift
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._5(lift) => lift
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._6(lift) => lift
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._7(lift) => lift
        }
      
    }
    object CompOp {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`=`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp
      
      final case class _2(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp
      
      final case class _3(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp
      
      final case class _4(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`<`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp
      
      final case class _5(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`>`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp
      
      final case class _6(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp
      
      final case class _7(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp
      
    }
    
    sealed abstract class Query extends _root_.harness.archive.parsers.QueryParser.NonTerminal("Query") {
      
      final def toExpr: _root_.slyce.parse.Expression[_root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operand, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operator] = {
        def toExpr1(expr: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query): _root_.slyce.parse.Expression[_root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operand, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operator] =
          expr match {
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._1(left, op, right) => _root_.slyce.parse.Expression(toExpr1(left), op, toExpr2(right))
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._2(expr) => toExpr2(expr)
          }
        
        def toExpr2(expr: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2): _root_.slyce.parse.Expression[_root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operand, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operator] =
          expr match {
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._1(left, op, right) => _root_.slyce.parse.Expression(toExpr2(left), op, toExpr3(right))
            case _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._2(expr) => toExpr3(expr)
          }
        
        def toExpr3(expr: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3): _root_.slyce.parse.Expression[_root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operand, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query.Operator] =
          _root_.slyce.parse.Expression(expr)
        
        toExpr1(this)
      }
      
    }
    object Query {
      
      type Operand = _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3
      sealed trait Operator extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query,
        _2: _root_.harness.archive.parsers.QueryParser.Terminal.`&`,
        _3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query
      
      final case class _2(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query
      
    }
    
    sealed abstract class Query2 extends _root_.harness.archive.parsers.QueryParser.NonTerminal("Query2")
    object Query2 {
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2,
        _2: _root_.harness.archive.parsers.QueryParser.Terminal.`|`,
        _3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2
      
      final case class _2(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2
      
    }
    
    sealed abstract class Query3 extends _root_.harness.archive.parsers.QueryParser.NonTerminal("Query3")
    object Query3 {
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text,
        _2: _root_.harness.archive.parsers.QueryParser.Terminal.`=`,
        _3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`,
        _4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head,
        _5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3
      
      final case class _2(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text,
        _2: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`,
        _3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`,
        _4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head,
        _5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3
      
      final case class _3(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text,
        _2: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3
      
      final case class _4(
        _1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text,
        _2: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp,
        _3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3
      
      final case class _5(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`(`,
        _2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query,
        _3: _root_.harness.archive.parsers.QueryParser.Terminal.`)`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3
      
    }
    
    sealed abstract class Text extends _root_.harness.archive.parsers.QueryParser.NonTerminal("Text")
    object Text {
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`,
        _2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0,
        _3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Text
      
      final case class _2(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.chars,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.Text
      
    }
    
    sealed abstract class TextElem extends _root_.harness.archive.parsers.QueryParser.NonTerminal("TextElem") {
      
      final def lift: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem.Lift =
        this match {
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._1(lift) => lift
          case _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._2(lift) => lift
        }
      
    }
    object TextElem {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.chars,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem
      
      final case class _2(
        _1: _root_.harness.archive.parsers.QueryParser.Terminal.escChar,
      ) extends _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem
      
    }
    
  }
  
  // =====| Lexer |=====
  
  private lazy val lexerState0: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 0,
      yields = None,
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState13) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState13) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState13) // '0' - '9'
      case 124 => _root_.scala.Some(lexerState1) // '|'
      case 63 => _root_.scala.Some(lexerState1) // '?'
      case 38 => _root_.scala.Some(lexerState1) // '&'
      case 32 => _root_.scala.Some(lexerState7) // ' '
      case c if c >= 9 && c <= 10 => _root_.scala.Some(lexerState7) // '\t' - '\n'
      case 61 => _root_.scala.Some(lexerState9) // '='
      case 62 => _root_.scala.Some(lexerState3) // '>'
      case 60 => _root_.scala.Some(lexerState3) // '<'
      case 126 => _root_.scala.Some(lexerState10) // '~'
      case 33 => _root_.scala.Some(lexerState10) // '!'
      case 34 => _root_.scala.Some(lexerState12) // '\"'
      case 95 => _root_.scala.Some(lexerState13) // '_'
      case c if c >= 45 && c <= 46 => _root_.scala.Some(lexerState13) // '-' - '.'
      case 93 => _root_.scala.Some(lexerState2) // ']'
      case 91 => _root_.scala.Some(lexerState2) // '['
      case 44 => _root_.scala.Some(lexerState2) // ','
      case c if c >= 40 && c <= 41 => _root_.scala.Some(lexerState2) // '(' - ')'
    }
  
  private lazy val lexerState1: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 1,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.harness.archive.parsers.QueryParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState2: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 2,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.harness.archive.parsers.QueryParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState3: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 3,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.harness.archive.parsers.QueryParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 61 => _root_.scala.Some(lexerState9) // '='
    }
  
  private lazy val lexerState4: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 4,
      yields = None,
    ) {
      case 10 => _root_.scala.None // '\n'
      case 92 => _root_.scala.Some(lexerState11) // '\\'
      case 34 => _root_.scala.Some(lexerState8) // '\"'
      case _ => _root_.scala.Some(lexerState5)
    }
  
  private lazy val lexerState5: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 5,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.harness.archive.parsers.QueryParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 34 => _root_.scala.None // '\"'
      case 10 => _root_.scala.None // '\n'
      case _ => _root_.scala.Some(lexerState5)
    }
  
  private lazy val lexerState6: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 6,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (1, 1),
              build = span => text => _root_.harness.archive.parsers.QueryParser.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState7: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 7,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState8: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 8,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.harness.archive.parsers.QueryParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState9: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 9,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.harness.archive.parsers.QueryParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState10: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 10,
      yields = None,
    ) {
      case 61 => _root_.scala.Some(lexerState9) // '='
    }
  
  private lazy val lexerState11: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 11,
      on = _ => _root_.scala.Some(lexerState6),
      yields = None,
    )
  
  private lazy val lexerState12: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 12,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.harness.archive.parsers.QueryParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState4)),
        ),
      ),
    )
  
  private lazy val lexerState13: _root_.slyce.parse.Lexer.State[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.harness.archive.parsers.QueryParser.Terminal](
      id = 13,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.harness.archive.parsers.QueryParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState13) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState13) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState13) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState13) // '_'
      case c if c >= 45 && c <= 46 => _root_.scala.Some(lexerState13) // '-' - '.'
    }
  
  override val lexer: _root_.slyce.parse.Lexer[_root_.harness.archive.parsers.QueryParser.Terminal] =
    _root_.slyce.parse.Lexer[_root_.harness.archive.parsers.QueryParser.Terminal](lexerState0)
  
  // =====| Grammar |=====
  
  lazy val grammarState0: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 0,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState78)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState71)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query => grammarState60
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState4
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2 => grammarState12
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState83
      },
    )
  
  lazy val grammarState1: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 1,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState47
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState80
      },
    )
  
  lazy val grammarState2: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 2,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState78)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState71)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState4
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2 => grammarState72
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState83
      },
    )
  
  lazy val grammarState3: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 3,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState1)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState3)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query => grammarState87
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState67
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2 => grammarState22
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState28
      },
    )
  
  lazy val grammarState4: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 4,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._2(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState5: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 5,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState95)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState6: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 6,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState57)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState68
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head => grammarState16
      },
    )
  
  lazy val grammarState7: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 7,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState91)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail => grammarState84
      },
    )
  
  lazy val grammarState8: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 8,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`|`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`|`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._1(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`|`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState9: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 9,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState1)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState98)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState67
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2 => grammarState44
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState39
      },
    )
  
  lazy val grammarState10: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 10,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState11: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 11,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._7(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._7(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState12: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 12,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState55)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState13: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 13,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState14: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 14,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState15: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 15,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState52)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState59)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState76
      },
    )
  
  lazy val grammarState16: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 16,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState41)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState17: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 17,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState18: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 18,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._2(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._2(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._2(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState19: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 19,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState17)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState20: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 20,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState1)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState3)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState67
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2 => grammarState42
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState28
      },
    )
  
  lazy val grammarState21: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 21,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState24
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState21
      },
    )
  
  lazy val grammarState22: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 22,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState35)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState23: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 23,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._3(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._3(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState94)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState24: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 24,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState25: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 25,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState43)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState26: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 26,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState24
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState26
      },
    )
  
  lazy val grammarState27: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 27,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._5(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._5(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._5(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState28: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 28,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState56)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState92)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState11)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState36)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState38)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState13)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState37)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState64)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp => grammarState29
      },
    )
  
  lazy val grammarState29: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 29,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState63)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState45)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState93
      },
    )
  
  lazy val grammarState30: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 30,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState96)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState31: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 31,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState18)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState32: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 32,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState33)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail => grammarState40
      },
    )
  
  lazy val grammarState33: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 33,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState57)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState32
      },
    )
  
  lazy val grammarState34: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 34,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState66)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState35: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 35,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState1)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState3)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState85
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState28
      },
    )
  
  lazy val grammarState36: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 36,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`>`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._5(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`>`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._5(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState37: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 37,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._6(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._6(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState38: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 38,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._3(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._3(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState88)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState39: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 39,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState61)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState92)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState11)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState36)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState23)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState13)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState37)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState64)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp => grammarState69
      },
    )
  
  lazy val grammarState40: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 40,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState41: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 41,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._2(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._2(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._2(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState42: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 42,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`&`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`&`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState35)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState43: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 43,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._1(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._1(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState44: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 44,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`&`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`&`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState53)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState45: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 45,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState46
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState26
      },
    )
  
  lazy val grammarState46: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 46,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState17)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState47: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 47,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState66)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState48: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 48,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._3(_1, _2), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._3(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState49: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 49,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState99
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState74
      },
    )
  
  lazy val grammarState50: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 50,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState53)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState51: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 51,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState20)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState27)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState52: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 52,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState53: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 53,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState1)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState98)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState85
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState39
      },
    )
  
  lazy val grammarState54: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 54,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState19
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState26
      },
    )
  
  lazy val grammarState55: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 55,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState78)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState71)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState8
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState83
      },
    )
  
  lazy val grammarState56: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 56,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState77)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState57: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 57,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState81
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState74
      },
    )
  
  lazy val grammarState58: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 58,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState49)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState7
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head => grammarState82
      },
    )
  
  lazy val grammarState59: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 59,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState65
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState21
      },
    )
  
  lazy val grammarState60: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 60,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState2)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Accept[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(root: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), _) :: _root_.scala.Nil => root
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState61: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 61,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._1(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState58)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState62: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 62,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState91)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail => grammarState40
      },
    )
  
  lazy val grammarState63: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 63,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState64: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 64,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._3(_1, _2), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._3(_1, _2), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState65: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 65,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState86)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState66: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 66,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState67: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 67,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState68: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 68,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState33)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail => grammarState84
      },
    )
  
  lazy val grammarState69: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 69,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState63)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState54)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState93
      },
    )
  
  lazy val grammarState70: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 70,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState71: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 71,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState1)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState98)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query => grammarState97
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState67
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2 => grammarState50
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState39
      },
    )
  
  lazy val grammarState72: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 72,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`&`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState55)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`&`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState73: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 73,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState74: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 74,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState24
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState74
      },
    )
  
  lazy val grammarState75: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 75,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._3(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._3(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState6)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState76: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 76,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._4(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._4(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState77: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 77,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState49)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState7
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head => grammarState5
      },
    )
  
  lazy val grammarState78: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 78,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState34
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState80
      },
    )
  
  lazy val grammarState79: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 79,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState18)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState80: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 80,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState14)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState70)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0 => grammarState24
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.TextElem => grammarState80
      },
    )
  
  lazy val grammarState81: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 81,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState10)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState82: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 82,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState95)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState83: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 83,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState30)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState92)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState11)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState36)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState75)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState13)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState37)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState48)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp => grammarState15
      },
    )
  
  lazy val grammarState84: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 84,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState85: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 85,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`|`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`|`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`|`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState86: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 86,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState87: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 87,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState20)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState27)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState88: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 88,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState49)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState7
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head => grammarState79
      },
    )
  
  lazy val grammarState89: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 89,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._5(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._5(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._5(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState90: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 90,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`<=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`~=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`!=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`>=`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Text._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState91: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 91,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState49)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState62
      },
    )
  
  lazy val grammarState92: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 92,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`<`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._4(_1), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.harness.archive.parsers.QueryParser.Terminal.`<`), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState93: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 93,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._4(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._4(_1, _2, _3), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.harness.archive.parsers.QueryParser.NonTerminal.CompOp), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState94: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 94,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState49)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState7
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head => grammarState31
      },
    )
  
  lazy val grammarState95: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 95,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.harness.archive.parsers.QueryParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.harness.archive.parsers.QueryParser.Terminal.`[`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.harness.archive.parsers.QueryParser.Terminal.`=`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text), toState) ::
                stack,
            ) =>
              (toState, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3._1(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState96: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 96,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState73)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState57)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState68
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.AnonList1Head => grammarState25
      },
    )
  
  lazy val grammarState97: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 97,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`&`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState9)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState89)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState98: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 98,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState1)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState3)
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState90)
      },
      onNT = {
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query => grammarState51
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query3 => grammarState67
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Query2 => grammarState22
        case _: _root_.harness.archive.parsers.QueryParser.NonTerminal.Text => grammarState28
      },
    )
  
  lazy val grammarState99: _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar.State[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](
      id = 99,
      onTerm = {
        case (tok: _root_.harness.archive.parsers.QueryParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState10)
      },
      onNT = PartialFunction.empty
    )
  
  override val grammar: _root_.slyce.parse.Grammar[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query] =
    _root_.slyce.parse.Grammar[_root_.harness.archive.parsers.QueryParser.Terminal, _root_.harness.archive.parsers.QueryParser.NonTerminal, _root_.harness.archive.parsers.QueryParser.NonTerminal.Query](grammarState0)
  
}

// format: on
